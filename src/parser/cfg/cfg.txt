Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list | EPSILON 
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> Type-specifier #pushIdDec ID
Declaration-prime -> Fun-declaration-prime | Var-declaration-prime
Var-declaration-prime -> #single ; | [ #array NUM ] ;
Fun-declaration-prime -> #funDef ( Params #lastParam ) #funEnd Compound-stmt
Type-specifier -> #pushIdTypeInt int | #pushIdTypeVoid void
Params -> #pushIdTypeInt int #pushIdDec ID Param-prime Param-list | #noParam void
Param-list -> #incrementParamCounter , Param Param-list | EPSILON
Param -> Declaration-initial Param-prime
Param-prime -> #paramArr [  ] | EPSILON
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list | EPSILON
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt
Expression-stmt -> Expression ; | #breakLoop break ; | ;
Selection-stmt -> if ( Expression #saveEmptyAddr ) Statement Else-stmt
Else-stmt -> #writeJmpFalseSavedAddr endif | #writeJmpFalseSavedAddrSaveEmptyAddr else Statement #writeJmpSavedAddr endif
Iteration-stmt -> #saveAddrLoop repeat Statement until ( Expression #jmpFalseSavedAddrLoop )
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> #returnVoid ; | Expression #returnNonVoid ;
Expression -> Simple-expression-zegond | #pushId ID B
B -> = #assign Expression  | [ #arrayIndex Expression ] H | Simple-expression-prime
H -> = #assign Expression | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop #compare Additive-expression | EPSILON
Relop -> #lessthan < | #equal ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop #add Term D | EPSILON
Addop -> #plus + | #minus -
Term -> Factor G
Term-prime -> Factor-prime G
Term-zegond -> Factor-zegond G
G -> * #multiply Factor G | EPSILON
Factor -> ( Expression ) | #pushId ID Var-call-prime | #pushNum NUM
Var-call-prime -> ( Args #call ) | Var-prime
Var-prime -> [ #arrayIndex Expression ] | EPSILON
Factor-prime -> ( Args #call ) | EPSILON
Factor-zegond -> ( Expression ) | #pushNum NUM
Args -> Arg-list | EPSILON
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime | EPSILON